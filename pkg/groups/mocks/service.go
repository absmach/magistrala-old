// Code generated by mockery v2.38.0. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	groups "github.com/absmach/magistrala/pkg/groups"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Assign provides a mock function with given fields: ctx, token, groupID, relation, memberKind, memberIDs
func (_m *Service) Assign(ctx context.Context, token string, groupID string, relation string, memberKind string, memberIDs ...string) error {
	ret := _m.Called(ctx, token, groupID, relation, memberKind, memberIDs)

	if len(ret) == 0 {
		panic("no return value specified for Assign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, ...string) error); ok {
		r0 = rf(ctx, token, groupID, relation, memberKind, memberIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGroup provides a mock function with given fields: ctx, token, kind, g
func (_m *Service) CreateGroup(ctx context.Context, token string, kind string, g groups.Group) (groups.Group, error) {
	ret := _m.Called(ctx, token, kind, g)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 groups.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, groups.Group) (groups.Group, error)); ok {
		return rf(ctx, token, kind, g)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, groups.Group) groups.Group); ok {
		r0 = rf(ctx, token, kind, g)
	} else {
		r0 = ret.Get(0).(groups.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, groups.Group) error); ok {
		r1 = rf(ctx, token, kind, g)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: ctx, token, id
func (_m *Service) DeleteGroup(ctx context.Context, token string, id string) error {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableGroup provides a mock function with given fields: ctx, token, id
func (_m *Service) DisableGroup(ctx context.Context, token string, id string) (groups.Group, error) {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for DisableGroup")
	}

	var r0 groups.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (groups.Group, error)); ok {
		return rf(ctx, token, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) groups.Group); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Get(0).(groups.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableGroup provides a mock function with given fields: ctx, token, id
func (_m *Service) EnableGroup(ctx context.Context, token string, id string) (groups.Group, error) {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for EnableGroup")
	}

	var r0 groups.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (groups.Group, error)); ok {
		return rf(ctx, token, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) groups.Group); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Get(0).(groups.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, token, memberKind, memberID, gm
func (_m *Service) ListGroups(ctx context.Context, token string, memberKind string, memberID string, gm groups.Page) (groups.Page, error) {
	ret := _m.Called(ctx, token, memberKind, memberID, gm)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 groups.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, groups.Page) (groups.Page, error)); ok {
		return rf(ctx, token, memberKind, memberID, gm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, groups.Page) groups.Page); ok {
		r0 = rf(ctx, token, memberKind, memberID, gm)
	} else {
		r0 = ret.Get(0).(groups.Page)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, groups.Page) error); ok {
		r1 = rf(ctx, token, memberKind, memberID, gm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMembers provides a mock function with given fields: ctx, token, groupID, permission, memberKind
func (_m *Service) ListMembers(ctx context.Context, token string, groupID string, permission string, memberKind string) (groups.MembersPage, error) {
	ret := _m.Called(ctx, token, groupID, permission, memberKind)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 groups.MembersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (groups.MembersPage, error)); ok {
		return rf(ctx, token, groupID, permission, memberKind)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) groups.MembersPage); ok {
		r0 = rf(ctx, token, groupID, permission, memberKind)
	} else {
		r0 = ret.Get(0).(groups.MembersPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, token, groupID, permission, memberKind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unassign provides a mock function with given fields: ctx, token, groupID, relation, memberKind, memberIDs
func (_m *Service) Unassign(ctx context.Context, token string, groupID string, relation string, memberKind string, memberIDs ...string) error {
	ret := _m.Called(ctx, token, groupID, relation, memberKind, memberIDs)

	if len(ret) == 0 {
		panic("no return value specified for Unassign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, ...string) error); ok {
		r0 = rf(ctx, token, groupID, relation, memberKind, memberIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroup provides a mock function with given fields: ctx, token, g
func (_m *Service) UpdateGroup(ctx context.Context, token string, g groups.Group) (groups.Group, error) {
	ret := _m.Called(ctx, token, g)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 groups.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, groups.Group) (groups.Group, error)); ok {
		return rf(ctx, token, g)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, groups.Group) groups.Group); ok {
		r0 = rf(ctx, token, g)
	} else {
		r0 = ret.Get(0).(groups.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, groups.Group) error); ok {
		r1 = rf(ctx, token, g)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewGroup provides a mock function with given fields: ctx, token, id
func (_m *Service) ViewGroup(ctx context.Context, token string, id string) (groups.Group, error) {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for ViewGroup")
	}

	var r0 groups.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (groups.Group, error)); ok {
		return rf(ctx, token, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) groups.Group); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Get(0).(groups.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewGroupPerms provides a mock function with given fields: ctx, token, id
func (_m *Service) ViewGroupPerms(ctx context.Context, token string, id string) ([]string, error) {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for ViewGroupPerms")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]string, error)); ok {
		return rf(ctx, token, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(ctx, token, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.38.0. DO NOT EDIT.

package sdk

import (
	errors "github.com/absmach/magistrala/pkg/errors"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockSDK is an autogenerated mock type for the SDK type
type MockSDK struct {
	mock.Mock
}

// AddBootstrap provides a mock function with given fields: cfg, token
func (_m *MockSDK) AddBootstrap(cfg BootstrapConfig, token string) (string, errors.SDKError) {
	ret := _m.Called(cfg, token)

	if len(ret) == 0 {
		panic("no return value specified for AddBootstrap")
	}

	var r0 string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(BootstrapConfig, string) (string, errors.SDKError)); ok {
		return rf(cfg, token)
	}
	if rf, ok := ret.Get(0).(func(BootstrapConfig, string) string); ok {
		r0 = rf(cfg, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(BootstrapConfig, string) errors.SDKError); ok {
		r1 = rf(cfg, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// AddUserGroupToChannel provides a mock function with given fields: channelID, req, token
func (_m *MockSDK) AddUserGroupToChannel(channelID string, req UserGroupsRequest, token string) errors.SDKError {
	ret := _m.Called(channelID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for AddUserGroupToChannel")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, UserGroupsRequest, string) errors.SDKError); ok {
		r0 = rf(channelID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// AddUserToChannel provides a mock function with given fields: channelID, req, token
func (_m *MockSDK) AddUserToChannel(channelID string, req UsersRelationRequest, token string) errors.SDKError {
	ret := _m.Called(channelID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToChannel")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, UsersRelationRequest, string) errors.SDKError); ok {
		r0 = rf(channelID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// AddUserToDomain provides a mock function with given fields: domainID, req, token
func (_m *MockSDK) AddUserToDomain(domainID string, req UsersRelationRequest, token string) errors.SDKError {
	ret := _m.Called(domainID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, UsersRelationRequest, string) errors.SDKError); ok {
		r0 = rf(domainID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// AddUserToGroup provides a mock function with given fields: groupID, req, token
func (_m *MockSDK) AddUserToGroup(groupID string, req UsersRelationRequest, token string) errors.SDKError {
	ret := _m.Called(groupID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToGroup")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, UsersRelationRequest, string) errors.SDKError); ok {
		r0 = rf(groupID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// Bootstrap provides a mock function with given fields: externalID, externalKey
func (_m *MockSDK) Bootstrap(externalID string, externalKey string) (BootstrapConfig, errors.SDKError) {
	ret := _m.Called(externalID, externalKey)

	if len(ret) == 0 {
		panic("no return value specified for Bootstrap")
	}

	var r0 BootstrapConfig
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (BootstrapConfig, errors.SDKError)); ok {
		return rf(externalID, externalKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) BootstrapConfig); ok {
		r0 = rf(externalID, externalKey)
	} else {
		r0 = ret.Get(0).(BootstrapConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(externalID, externalKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// BootstrapSecure provides a mock function with given fields: externalID, externalKey
func (_m *MockSDK) BootstrapSecure(externalID string, externalKey string) (BootstrapConfig, errors.SDKError) {
	ret := _m.Called(externalID, externalKey)

	if len(ret) == 0 {
		panic("no return value specified for BootstrapSecure")
	}

	var r0 BootstrapConfig
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (BootstrapConfig, errors.SDKError)); ok {
		return rf(externalID, externalKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) BootstrapConfig); ok {
		r0 = rf(externalID, externalKey)
	} else {
		r0 = ret.Get(0).(BootstrapConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(externalID, externalKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Bootstraps provides a mock function with given fields: pm, token
func (_m *MockSDK) Bootstraps(pm PageMetadata, token string) (BootstrapPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Bootstraps")
	}

	var r0 BootstrapPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(PageMetadata, string) (BootstrapPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(PageMetadata, string) BootstrapPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(BootstrapPage)
	}

	if rf, ok := ret.Get(1).(func(PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Channel provides a mock function with given fields: id, token
func (_m *MockSDK) Channel(id string, token string) (Channel, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Channel, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Channel); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ChannelPermissions provides a mock function with given fields: id, token
func (_m *MockSDK) ChannelPermissions(id string, token string) (Channel, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for ChannelPermissions")
	}

	var r0 Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Channel, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Channel); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Channels provides a mock function with given fields: pm, token
func (_m *MockSDK) Channels(pm PageMetadata, token string) (ChannelsPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Channels")
	}

	var r0 ChannelsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(PageMetadata, string) (ChannelsPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(PageMetadata, string) ChannelsPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(ChannelsPage)
	}

	if rf, ok := ret.Get(1).(func(PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ChannelsByThing provides a mock function with given fields: thingID, pm, token
func (_m *MockSDK) ChannelsByThing(thingID string, pm PageMetadata, token string) (ChannelsPage, errors.SDKError) {
	ret := _m.Called(thingID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ChannelsByThing")
	}

	var r0 ChannelsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (ChannelsPage, errors.SDKError)); ok {
		return rf(thingID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) ChannelsPage); ok {
		r0 = rf(thingID, pm, token)
	} else {
		r0 = ret.Get(0).(ChannelsPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(thingID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Children provides a mock function with given fields: id, pm, token
func (_m *MockSDK) Children(id string, pm PageMetadata, token string) (GroupsPage, errors.SDKError) {
	ret := _m.Called(id, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Children")
	}

	var r0 GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (GroupsPage, errors.SDKError)); ok {
		return rf(id, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) GroupsPage); ok {
		r0 = rf(id, pm, token)
	} else {
		r0 = ret.Get(0).(GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(id, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Connect provides a mock function with given fields: conns, token
func (_m *MockSDK) Connect(conns Connection, token string) errors.SDKError {
	ret := _m.Called(conns, token)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(Connection, string) errors.SDKError); ok {
		r0 = rf(conns, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ConnectThing provides a mock function with given fields: thingID, chanID, token
func (_m *MockSDK) ConnectThing(thingID string, chanID string, token string) errors.SDKError {
	ret := _m.Called(thingID, chanID, token)

	if len(ret) == 0 {
		panic("no return value specified for ConnectThing")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(thingID, chanID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// CreateChannel provides a mock function with given fields: channel, token
func (_m *MockSDK) CreateChannel(channel Channel, token string) (Channel, errors.SDKError) {
	ret := _m.Called(channel, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Channel, string) (Channel, errors.SDKError)); ok {
		return rf(channel, token)
	}
	if rf, ok := ret.Get(0).(func(Channel, string) Channel); ok {
		r0 = rf(channel, token)
	} else {
		r0 = ret.Get(0).(Channel)
	}

	if rf, ok := ret.Get(1).(func(Channel, string) errors.SDKError); ok {
		r1 = rf(channel, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateChannels provides a mock function with given fields: channels, token
func (_m *MockSDK) CreateChannels(channels []Channel, token string) ([]Channel, errors.SDKError) {
	ret := _m.Called(channels, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannels")
	}

	var r0 []Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func([]Channel, string) ([]Channel, errors.SDKError)); ok {
		return rf(channels, token)
	}
	if rf, ok := ret.Get(0).(func([]Channel, string) []Channel); ok {
		r0 = rf(channels, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Channel)
		}
	}

	if rf, ok := ret.Get(1).(func([]Channel, string) errors.SDKError); ok {
		r1 = rf(channels, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: d, token
func (_m *MockSDK) CreateDomain(d Domain, token string) (Domain, errors.SDKError) {
	ret := _m.Called(d, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 Domain
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Domain, string) (Domain, errors.SDKError)); ok {
		return rf(d, token)
	}
	if rf, ok := ret.Get(0).(func(Domain, string) Domain); ok {
		r0 = rf(d, token)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	if rf, ok := ret.Get(1).(func(Domain, string) errors.SDKError); ok {
		r1 = rf(d, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: group, token
func (_m *MockSDK) CreateGroup(group Group, token string) (Group, errors.SDKError) {
	ret := _m.Called(group, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Group, string) (Group, errors.SDKError)); ok {
		return rf(group, token)
	}
	if rf, ok := ret.Get(0).(func(Group, string) Group); ok {
		r0 = rf(group, token)
	} else {
		r0 = ret.Get(0).(Group)
	}

	if rf, ok := ret.Get(1).(func(Group, string) errors.SDKError); ok {
		r1 = rf(group, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: topic, contact, token
func (_m *MockSDK) CreateSubscription(topic string, contact string, token string) (string, errors.SDKError) {
	ret := _m.Called(topic, contact, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (string, errors.SDKError)); ok {
		return rf(topic, contact, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(topic, contact, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(topic, contact, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateThing provides a mock function with given fields: thing, token
func (_m *MockSDK) CreateThing(thing Thing, token string) (Thing, errors.SDKError) {
	ret := _m.Called(thing, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateThing")
	}

	var r0 Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Thing, string) (Thing, errors.SDKError)); ok {
		return rf(thing, token)
	}
	if rf, ok := ret.Get(0).(func(Thing, string) Thing); ok {
		r0 = rf(thing, token)
	} else {
		r0 = ret.Get(0).(Thing)
	}

	if rf, ok := ret.Get(1).(func(Thing, string) errors.SDKError); ok {
		r1 = rf(thing, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateThings provides a mock function with given fields: things, token
func (_m *MockSDK) CreateThings(things []Thing, token string) ([]Thing, errors.SDKError) {
	ret := _m.Called(things, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateThings")
	}

	var r0 []Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func([]Thing, string) ([]Thing, errors.SDKError)); ok {
		return rf(things, token)
	}
	if rf, ok := ret.Get(0).(func([]Thing, string) []Thing); ok {
		r0 = rf(things, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Thing)
		}
	}

	if rf, ok := ret.Get(1).(func([]Thing, string) errors.SDKError); ok {
		r1 = rf(things, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: lt
func (_m *MockSDK) CreateToken(lt Login) (Token, errors.SDKError) {
	ret := _m.Called(lt)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 Token
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Login) (Token, errors.SDKError)); ok {
		return rf(lt)
	}
	if rf, ok := ret.Get(0).(func(Login) Token); ok {
		r0 = rf(lt)
	} else {
		r0 = ret.Get(0).(Token)
	}

	if rf, ok := ret.Get(1).(func(Login) errors.SDKError); ok {
		r1 = rf(lt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user, token
func (_m *MockSDK) CreateUser(user User, token string) (User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(User, string) (User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(User, string) User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: id, token
func (_m *MockSDK) DeleteSubscription(id string, token string) errors.SDKError {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DisableChannel provides a mock function with given fields: id, token
func (_m *MockSDK) DisableChannel(id string, token string) (Channel, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableChannel")
	}

	var r0 Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Channel, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Channel); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DisableDomain provides a mock function with given fields: domainID, token
func (_m *MockSDK) DisableDomain(domainID string, token string) errors.SDKError {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DisableGroup provides a mock function with given fields: id, token
func (_m *MockSDK) DisableGroup(id string, token string) (Group, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableGroup")
	}

	var r0 Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Group, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Group); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Group)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DisableThing provides a mock function with given fields: id, token
func (_m *MockSDK) DisableThing(id string, token string) (Thing, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableThing")
	}

	var r0 Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Thing, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Thing); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Thing)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DisableUser provides a mock function with given fields: id, token
func (_m *MockSDK) DisableUser(id string, token string) (User, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableUser")
	}

	var r0 User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (User, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) User); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: connIDs, token
func (_m *MockSDK) Disconnect(connIDs Connection, token string) errors.SDKError {
	ret := _m.Called(connIDs, token)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(Connection, string) errors.SDKError); ok {
		r0 = rf(connIDs, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DisconnectThing provides a mock function with given fields: thingID, chanID, token
func (_m *MockSDK) DisconnectThing(thingID string, chanID string, token string) errors.SDKError {
	ret := _m.Called(thingID, chanID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectThing")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(thingID, chanID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// Domain provides a mock function with given fields: domainID, token
func (_m *MockSDK) Domain(domainID string, token string) (Domain, errors.SDKError) {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Domain")
	}

	var r0 Domain
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Domain, errors.SDKError)); ok {
		return rf(domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Domain); ok {
		r0 = rf(domainID, token)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Domains provides a mock function with given fields: pm, token
func (_m *MockSDK) Domains(pm PageMetadata, token string) (DomainsPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Domains")
	}

	var r0 DomainsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(PageMetadata, string) (DomainsPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(PageMetadata, string) DomainsPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(DomainsPage)
	}

	if rf, ok := ret.Get(1).(func(PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableChannel provides a mock function with given fields: id, token
func (_m *MockSDK) EnableChannel(id string, token string) (Channel, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableChannel")
	}

	var r0 Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Channel, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Channel); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableDomain provides a mock function with given fields: domainID, token
func (_m *MockSDK) EnableDomain(domainID string, token string) errors.SDKError {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// EnableGroup provides a mock function with given fields: id, token
func (_m *MockSDK) EnableGroup(id string, token string) (Group, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableGroup")
	}

	var r0 Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Group, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Group); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Group)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableThing provides a mock function with given fields: id, token
func (_m *MockSDK) EnableThing(id string, token string) (Thing, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableThing")
	}

	var r0 Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Thing, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Thing); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Thing)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableUser provides a mock function with given fields: id, token
func (_m *MockSDK) EnableUser(id string, token string) (User, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableUser")
	}

	var r0 User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (User, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) User); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Group provides a mock function with given fields: id, token
func (_m *MockSDK) Group(id string, token string) (Group, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Group, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Group); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Group)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// GroupPermissions provides a mock function with given fields: id, token
func (_m *MockSDK) GroupPermissions(id string, token string) (Group, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for GroupPermissions")
	}

	var r0 Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Group, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Group); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Group)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Groups provides a mock function with given fields: pm, token
func (_m *MockSDK) Groups(pm PageMetadata, token string) (GroupsPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Groups")
	}

	var r0 GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(PageMetadata, string) (GroupsPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(PageMetadata, string) GroupsPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Health provides a mock function with given fields: service
func (_m *MockSDK) Health(service string) (HealthInfo, errors.SDKError) {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 HealthInfo
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) (HealthInfo, errors.SDKError)); ok {
		return rf(service)
	}
	if rf, ok := ret.Get(0).(func(string) HealthInfo); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Get(0).(HealthInfo)
	}

	if rf, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = rf(service)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// IdentifyThing provides a mock function with given fields: key
func (_m *MockSDK) IdentifyThing(key string) (string, errors.SDKError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for IdentifyThing")
	}

	var r0 string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) (string, errors.SDKError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// IssueCert provides a mock function with given fields: thingID, valid, token
func (_m *MockSDK) IssueCert(thingID string, valid string, token string) (Cert, errors.SDKError) {
	ret := _m.Called(thingID, valid, token)

	if len(ret) == 0 {
		panic("no return value specified for IssueCert")
	}

	var r0 Cert
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (Cert, errors.SDKError)); ok {
		return rf(thingID, valid, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) Cert); ok {
		r0 = rf(thingID, valid, token)
	} else {
		r0 = ret.Get(0).(Cert)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(thingID, valid, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListChannelUserGroups provides a mock function with given fields: channelID, pm, token
func (_m *MockSDK) ListChannelUserGroups(channelID string, pm PageMetadata, token string) (GroupsPage, errors.SDKError) {
	ret := _m.Called(channelID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelUserGroups")
	}

	var r0 GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (GroupsPage, errors.SDKError)); ok {
		return rf(channelID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) GroupsPage); ok {
		r0 = rf(channelID, pm, token)
	} else {
		r0 = ret.Get(0).(GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(channelID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListChannelUsers provides a mock function with given fields: channelID, pm, token
func (_m *MockSDK) ListChannelUsers(channelID string, pm PageMetadata, token string) (UsersPage, errors.SDKError) {
	ret := _m.Called(channelID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelUsers")
	}

	var r0 UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (UsersPage, errors.SDKError)); ok {
		return rf(channelID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) UsersPage); ok {
		r0 = rf(channelID, pm, token)
	} else {
		r0 = ret.Get(0).(UsersPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(channelID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListDomainUsers provides a mock function with given fields: domainID, pm, token
func (_m *MockSDK) ListDomainUsers(domainID string, pm PageMetadata, token string) (UsersPage, errors.SDKError) {
	ret := _m.Called(domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainUsers")
	}

	var r0 UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (UsersPage, errors.SDKError)); ok {
		return rf(domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) UsersPage); ok {
		r0 = rf(domainID, pm, token)
	} else {
		r0 = ret.Get(0).(UsersPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListGroupChannels provides a mock function with given fields: groupID, pm, token
func (_m *MockSDK) ListGroupChannels(groupID string, pm PageMetadata, token string) (GroupsPage, errors.SDKError) {
	ret := _m.Called(groupID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupChannels")
	}

	var r0 GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (GroupsPage, errors.SDKError)); ok {
		return rf(groupID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) GroupsPage); ok {
		r0 = rf(groupID, pm, token)
	} else {
		r0 = ret.Get(0).(GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(groupID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListGroupUsers provides a mock function with given fields: groupID, pm, token
func (_m *MockSDK) ListGroupUsers(groupID string, pm PageMetadata, token string) (UsersPage, errors.SDKError) {
	ret := _m.Called(groupID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupUsers")
	}

	var r0 UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (UsersPage, errors.SDKError)); ok {
		return rf(groupID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) UsersPage); ok {
		r0 = rf(groupID, pm, token)
	} else {
		r0 = ret.Get(0).(UsersPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(groupID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: pm, token
func (_m *MockSDK) ListSubscriptions(pm PageMetadata, token string) (SubscriptionPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 SubscriptionPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(PageMetadata, string) (SubscriptionPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(PageMetadata, string) SubscriptionPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(SubscriptionPage)
	}

	if rf, ok := ret.Get(1).(func(PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListThingUsers provides a mock function with given fields: thingID, pm, token
func (_m *MockSDK) ListThingUsers(thingID string, pm PageMetadata, token string) (UsersPage, errors.SDKError) {
	ret := _m.Called(thingID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListThingUsers")
	}

	var r0 UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (UsersPage, errors.SDKError)); ok {
		return rf(thingID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) UsersPage); ok {
		r0 = rf(thingID, pm, token)
	} else {
		r0 = ret.Get(0).(UsersPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(thingID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListUserChannels provides a mock function with given fields: userID, pm, token
func (_m *MockSDK) ListUserChannels(userID string, pm PageMetadata, token string) (ChannelsPage, errors.SDKError) {
	ret := _m.Called(userID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListUserChannels")
	}

	var r0 ChannelsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (ChannelsPage, errors.SDKError)); ok {
		return rf(userID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) ChannelsPage); ok {
		r0 = rf(userID, pm, token)
	} else {
		r0 = ret.Get(0).(ChannelsPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(userID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListUserDomains provides a mock function with given fields: userID, pm, token
func (_m *MockSDK) ListUserDomains(userID string, pm PageMetadata, token string) (DomainsPage, errors.SDKError) {
	ret := _m.Called(userID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListUserDomains")
	}

	var r0 DomainsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (DomainsPage, errors.SDKError)); ok {
		return rf(userID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) DomainsPage); ok {
		r0 = rf(userID, pm, token)
	} else {
		r0 = ret.Get(0).(DomainsPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(userID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListUserGroups provides a mock function with given fields: userID, pm, token
func (_m *MockSDK) ListUserGroups(userID string, pm PageMetadata, token string) (GroupsPage, errors.SDKError) {
	ret := _m.Called(userID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListUserGroups")
	}

	var r0 GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (GroupsPage, errors.SDKError)); ok {
		return rf(userID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) GroupsPage); ok {
		r0 = rf(userID, pm, token)
	} else {
		r0 = ret.Get(0).(GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(userID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListUserThings provides a mock function with given fields: userID, pm, token
func (_m *MockSDK) ListUserThings(userID string, pm PageMetadata, token string) (ThingsPage, errors.SDKError) {
	ret := _m.Called(userID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListUserThings")
	}

	var r0 ThingsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (ThingsPage, errors.SDKError)); ok {
		return rf(userID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) ThingsPage); ok {
		r0 = rf(userID, pm, token)
	} else {
		r0 = ret.Get(0).(ThingsPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(userID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Parents provides a mock function with given fields: id, pm, token
func (_m *MockSDK) Parents(id string, pm PageMetadata, token string) (GroupsPage, errors.SDKError) {
	ret := _m.Called(id, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Parents")
	}

	var r0 GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (GroupsPage, errors.SDKError)); ok {
		return rf(id, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) GroupsPage); ok {
		r0 = rf(id, pm, token)
	} else {
		r0 = ret.Get(0).(GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(id, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ReadMessages provides a mock function with given fields: chanID, token
func (_m *MockSDK) ReadMessages(chanID string, token string) (MessagesPage, errors.SDKError) {
	ret := _m.Called(chanID, token)

	if len(ret) == 0 {
		panic("no return value specified for ReadMessages")
	}

	var r0 MessagesPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (MessagesPage, errors.SDKError)); ok {
		return rf(chanID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) MessagesPage); ok {
		r0 = rf(chanID, token)
	} else {
		r0 = ret.Get(0).(MessagesPage)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(chanID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: lt, token
func (_m *MockSDK) RefreshToken(lt Login, token string) (Token, errors.SDKError) {
	ret := _m.Called(lt, token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 Token
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Login, string) (Token, errors.SDKError)); ok {
		return rf(lt, token)
	}
	if rf, ok := ret.Get(0).(func(Login, string) Token); ok {
		r0 = rf(lt, token)
	} else {
		r0 = ret.Get(0).(Token)
	}

	if rf, ok := ret.Get(1).(func(Login, string) errors.SDKError); ok {
		r1 = rf(lt, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// RemoveBootstrap provides a mock function with given fields: id, token
func (_m *MockSDK) RemoveBootstrap(id string, token string) errors.SDKError {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveBootstrap")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveUserFromChannel provides a mock function with given fields: channelID, req, token
func (_m *MockSDK) RemoveUserFromChannel(channelID string, req UsersRelationRequest, token string) errors.SDKError {
	ret := _m.Called(channelID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromChannel")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, UsersRelationRequest, string) errors.SDKError); ok {
		r0 = rf(channelID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveUserFromDomain provides a mock function with given fields: domainID, req, token
func (_m *MockSDK) RemoveUserFromDomain(domainID string, req UsersRelationRequest, token string) errors.SDKError {
	ret := _m.Called(domainID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, UsersRelationRequest, string) errors.SDKError); ok {
		r0 = rf(domainID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveUserFromGroup provides a mock function with given fields: groupID, req, token
func (_m *MockSDK) RemoveUserFromGroup(groupID string, req UsersRelationRequest, token string) errors.SDKError {
	ret := _m.Called(groupID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromGroup")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, UsersRelationRequest, string) errors.SDKError); ok {
		r0 = rf(groupID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveUserGroupFromChannel provides a mock function with given fields: channelID, req, token
func (_m *MockSDK) RemoveUserGroupFromChannel(channelID string, req UserGroupsRequest, token string) errors.SDKError {
	ret := _m.Called(channelID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserGroupFromChannel")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, UserGroupsRequest, string) errors.SDKError); ok {
		r0 = rf(channelID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ResetPassword provides a mock function with given fields: password, confPass, token
func (_m *MockSDK) ResetPassword(password string, confPass string, token string) errors.SDKError {
	ret := _m.Called(password, confPass, token)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(password, confPass, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ResetPasswordRequest provides a mock function with given fields: email
func (_m *MockSDK) ResetPasswordRequest(email string) errors.SDKError {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ResetPasswordRequest")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) errors.SDKError); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RevokeCert provides a mock function with given fields: thingID, token
func (_m *MockSDK) RevokeCert(thingID string, token string) (time.Time, errors.SDKError) {
	ret := _m.Called(thingID, token)

	if len(ret) == 0 {
		panic("no return value specified for RevokeCert")
	}

	var r0 time.Time
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (time.Time, errors.SDKError)); ok {
		return rf(thingID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) time.Time); ok {
		r0 = rf(thingID, token)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(thingID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: chanID, msg, key
func (_m *MockSDK) SendMessage(chanID string, msg string, key string) errors.SDKError {
	ret := _m.Called(chanID, msg, key)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(chanID, msg, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// SetContentType provides a mock function with given fields: ct
func (_m *MockSDK) SetContentType(ct ContentType) errors.SDKError {
	ret := _m.Called(ct)

	if len(ret) == 0 {
		panic("no return value specified for SetContentType")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(ContentType) errors.SDKError); ok {
		r0 = rf(ct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ShareThing provides a mock function with given fields: thingID, req, token
func (_m *MockSDK) ShareThing(thingID string, req UsersRelationRequest, token string) errors.SDKError {
	ret := _m.Called(thingID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for ShareThing")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, UsersRelationRequest, string) errors.SDKError); ok {
		r0 = rf(thingID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// Thing provides a mock function with given fields: id, token
func (_m *MockSDK) Thing(id string, token string) (Thing, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for Thing")
	}

	var r0 Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Thing, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Thing); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Thing)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ThingPermissions provides a mock function with given fields: id, token
func (_m *MockSDK) ThingPermissions(id string, token string) (Thing, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for ThingPermissions")
	}

	var r0 Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Thing, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Thing); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Thing)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Things provides a mock function with given fields: pm, token
func (_m *MockSDK) Things(pm PageMetadata, token string) (ThingsPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Things")
	}

	var r0 ThingsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(PageMetadata, string) (ThingsPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(PageMetadata, string) ThingsPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(ThingsPage)
	}

	if rf, ok := ret.Get(1).(func(PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ThingsByChannel provides a mock function with given fields: chanID, pm, token
func (_m *MockSDK) ThingsByChannel(chanID string, pm PageMetadata, token string) (ThingsPage, errors.SDKError) {
	ret := _m.Called(chanID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ThingsByChannel")
	}

	var r0 ThingsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) (ThingsPage, errors.SDKError)); ok {
		return rf(chanID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, PageMetadata, string) ThingsPage); ok {
		r0 = rf(chanID, pm, token)
	} else {
		r0 = ret.Get(0).(ThingsPage)
	}

	if rf, ok := ret.Get(1).(func(string, PageMetadata, string) errors.SDKError); ok {
		r1 = rf(chanID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UnshareThing provides a mock function with given fields: thingID, req, token
func (_m *MockSDK) UnshareThing(thingID string, req UsersRelationRequest, token string) errors.SDKError {
	ret := _m.Called(thingID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for UnshareThing")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, UsersRelationRequest, string) errors.SDKError); ok {
		r0 = rf(thingID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// UpdateBootstrap provides a mock function with given fields: cfg, token
func (_m *MockSDK) UpdateBootstrap(cfg BootstrapConfig, token string) errors.SDKError {
	ret := _m.Called(cfg, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBootstrap")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(BootstrapConfig, string) errors.SDKError); ok {
		r0 = rf(cfg, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// UpdateBootstrapCerts provides a mock function with given fields: id, clientCert, clientKey, ca, token
func (_m *MockSDK) UpdateBootstrapCerts(id string, clientCert string, clientKey string, ca string, token string) (BootstrapConfig, errors.SDKError) {
	ret := _m.Called(id, clientCert, clientKey, ca, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBootstrapCerts")
	}

	var r0 BootstrapConfig
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) (BootstrapConfig, errors.SDKError)); ok {
		return rf(id, clientCert, clientKey, ca, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) BootstrapConfig); ok {
		r0 = rf(id, clientCert, clientKey, ca, token)
	} else {
		r0 = ret.Get(0).(BootstrapConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, clientCert, clientKey, ca, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateBootstrapConnection provides a mock function with given fields: id, channels, token
func (_m *MockSDK) UpdateBootstrapConnection(id string, channels []string, token string) errors.SDKError {
	ret := _m.Called(id, channels, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBootstrapConnection")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, []string, string) errors.SDKError); ok {
		r0 = rf(id, channels, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// UpdateChannel provides a mock function with given fields: channel, token
func (_m *MockSDK) UpdateChannel(channel Channel, token string) (Channel, errors.SDKError) {
	ret := _m.Called(channel, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Channel, string) (Channel, errors.SDKError)); ok {
		return rf(channel, token)
	}
	if rf, ok := ret.Get(0).(func(Channel, string) Channel); ok {
		r0 = rf(channel, token)
	} else {
		r0 = ret.Get(0).(Channel)
	}

	if rf, ok := ret.Get(1).(func(Channel, string) errors.SDKError); ok {
		r1 = rf(channel, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateDomain provides a mock function with given fields: d, token
func (_m *MockSDK) UpdateDomain(d Domain, token string) (Domain, errors.SDKError) {
	ret := _m.Called(d, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomain")
	}

	var r0 Domain
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Domain, string) (Domain, errors.SDKError)); ok {
		return rf(d, token)
	}
	if rf, ok := ret.Get(0).(func(Domain, string) Domain); ok {
		r0 = rf(d, token)
	} else {
		r0 = ret.Get(0).(Domain)
	}

	if rf, ok := ret.Get(1).(func(Domain, string) errors.SDKError); ok {
		r1 = rf(d, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: group, token
func (_m *MockSDK) UpdateGroup(group Group, token string) (Group, errors.SDKError) {
	ret := _m.Called(group, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Group, string) (Group, errors.SDKError)); ok {
		return rf(group, token)
	}
	if rf, ok := ret.Get(0).(func(Group, string) Group); ok {
		r0 = rf(group, token)
	} else {
		r0 = ret.Get(0).(Group)
	}

	if rf, ok := ret.Get(1).(func(Group, string) errors.SDKError); ok {
		r1 = rf(group, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: oldPass, newPass, token
func (_m *MockSDK) UpdatePassword(oldPass string, newPass string, token string) (User, errors.SDKError) {
	ret := _m.Called(oldPass, newPass, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (User, errors.SDKError)); ok {
		return rf(oldPass, newPass, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) User); ok {
		r0 = rf(oldPass, newPass, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(oldPass, newPass, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateThing provides a mock function with given fields: thing, token
func (_m *MockSDK) UpdateThing(thing Thing, token string) (Thing, errors.SDKError) {
	ret := _m.Called(thing, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThing")
	}

	var r0 Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Thing, string) (Thing, errors.SDKError)); ok {
		return rf(thing, token)
	}
	if rf, ok := ret.Get(0).(func(Thing, string) Thing); ok {
		r0 = rf(thing, token)
	} else {
		r0 = ret.Get(0).(Thing)
	}

	if rf, ok := ret.Get(1).(func(Thing, string) errors.SDKError); ok {
		r1 = rf(thing, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateThingSecret provides a mock function with given fields: id, secret, token
func (_m *MockSDK) UpdateThingSecret(id string, secret string, token string) (Thing, errors.SDKError) {
	ret := _m.Called(id, secret, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThingSecret")
	}

	var r0 Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (Thing, errors.SDKError)); ok {
		return rf(id, secret, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) Thing); ok {
		r0 = rf(id, secret, token)
	} else {
		r0 = ret.Get(0).(Thing)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, secret, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateThingTags provides a mock function with given fields: thing, token
func (_m *MockSDK) UpdateThingTags(thing Thing, token string) (Thing, errors.SDKError) {
	ret := _m.Called(thing, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThingTags")
	}

	var r0 Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(Thing, string) (Thing, errors.SDKError)); ok {
		return rf(thing, token)
	}
	if rf, ok := ret.Get(0).(func(Thing, string) Thing); ok {
		r0 = rf(thing, token)
	} else {
		r0 = ret.Get(0).(Thing)
	}

	if rf, ok := ret.Get(1).(func(Thing, string) errors.SDKError); ok {
		r1 = rf(thing, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user, token
func (_m *MockSDK) UpdateUser(user User, token string) (User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(User, string) (User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(User, string) User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUserIdentity provides a mock function with given fields: user, token
func (_m *MockSDK) UpdateUserIdentity(user User, token string) (User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserIdentity")
	}

	var r0 User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(User, string) (User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(User, string) User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUserRole provides a mock function with given fields: user, token
func (_m *MockSDK) UpdateUserRole(user User, token string) (User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRole")
	}

	var r0 User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(User, string) (User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(User, string) User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUserTags provides a mock function with given fields: user, token
func (_m *MockSDK) UpdateUserTags(user User, token string) (User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTags")
	}

	var r0 User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(User, string) (User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(User, string) User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// User provides a mock function with given fields: id, token
func (_m *MockSDK) User(id string, token string) (User, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (User, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) User); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UserProfile provides a mock function with given fields: token
func (_m *MockSDK) UserProfile(token string) (User, errors.SDKError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for UserProfile")
	}

	var r0 User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) (User, errors.SDKError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Users provides a mock function with given fields: pm, token
func (_m *MockSDK) Users(pm PageMetadata, token string) (UsersPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(PageMetadata, string) (UsersPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(PageMetadata, string) UsersPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(UsersPage)
	}

	if rf, ok := ret.Get(1).(func(PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ViewBootstrap provides a mock function with given fields: id, token
func (_m *MockSDK) ViewBootstrap(id string, token string) (BootstrapConfig, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewBootstrap")
	}

	var r0 BootstrapConfig
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (BootstrapConfig, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) BootstrapConfig); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(BootstrapConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ViewCert provides a mock function with given fields: certID, token
func (_m *MockSDK) ViewCert(certID string, token string) (Cert, errors.SDKError) {
	ret := _m.Called(certID, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewCert")
	}

	var r0 Cert
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Cert, errors.SDKError)); ok {
		return rf(certID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Cert); ok {
		r0 = rf(certID, token)
	} else {
		r0 = ret.Get(0).(Cert)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(certID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ViewCertByThing provides a mock function with given fields: thingID, token
func (_m *MockSDK) ViewCertByThing(thingID string, token string) (CertSerials, errors.SDKError) {
	ret := _m.Called(thingID, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewCertByThing")
	}

	var r0 CertSerials
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (CertSerials, errors.SDKError)); ok {
		return rf(thingID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) CertSerials); ok {
		r0 = rf(thingID, token)
	} else {
		r0 = ret.Get(0).(CertSerials)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(thingID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ViewSubscription provides a mock function with given fields: id, token
func (_m *MockSDK) ViewSubscription(id string, token string) (Subscription, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewSubscription")
	}

	var r0 Subscription
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (Subscription, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) Subscription); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(Subscription)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Whitelist provides a mock function with given fields: cfg, token
func (_m *MockSDK) Whitelist(cfg BootstrapConfig, token string) errors.SDKError {
	ret := _m.Called(cfg, token)

	if len(ret) == 0 {
		panic("no return value specified for Whitelist")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(BootstrapConfig, string) errors.SDKError); ok {
		r0 = rf(cfg, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// NewMockSDK creates a new instance of MockSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSDK {
	mock := &MockSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
